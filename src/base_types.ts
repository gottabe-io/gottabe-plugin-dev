/*
Copyright 2022 gottabe-io

Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/**
 * Define the possible phases of the build
 */
export enum Phase {
	/**
	 * The cleaning phase. This phase occurs when the clean task is added to the command line
	 */
	CLEAN,
	/**
	 * It occurs before the compile phase and it's when the dependencies are loaded
	 */
	RESOLVE_DEPENDENCIES,
	/**
	 * The pre-compiling phase. It occurs before the compile phase
	 */
	PRECOMPILE,
	/**
	 * The compiling phase. It occurs when the build task is added to the command line
	 */
	COMPILE,
	/**
	 * The linking phase. It occurs before the linking phase
	 */
	PRELINK,
	/**
	 * The linking phase. It occurs after the compile phase in the build task
	 */
	LINK,
	/**
	 * The test phase can occur when the task test is added or after the build
	 */
	TEST,
	/**
	 * The pre-packaging phase. It occurs before the package phase.
	 */
	PREPACKAGE,
	/**
	 * The packaging phase. It occurs when the package task is added to the command line.
	 */
	PACKAGE,
	/**
	 * The pre-installing phase.
	 */
	PREINSTALL,
	/**
	 * The installing phase.
	 */
	INSTALL,
	/**
	 * The pre-publishing phase.
	 */
	PREPUBLISH,
	/**
	 * The publishing phase.
	 */
	PUBLISH,
	/**
	 * Occur after all phases.
	 */
	FINISH
}

/**
 * This namespace has constants for all artifact types that can be generated by a build.
 */
export namespace ArtifactTypes {
	/**
	 * The constant for the artifact type executable. It means that the result of the build is going to be a executable file.
	 */
	export const EXECUTABLE: string = 'executable';
	/**
	 * The constant for the artifact type shared library. It means that the result of the build is going to be a shared library, a Dll in windows or a So file in linux.
	 */
	export const SHARED_LIBRARY: string = 'shared_library';
	/**
	 * The constant for the artifact type executable. It means that the result of the build is going to be a static library.
	 */
	export const STATIC_LIBRARY: string = 'static library';
	/**
	 * The constant for the artifact type driver.
	 */
	export const DRIVER: string = 'driver';
	/**
	 * This constant is used by parent build descritors. The artifacts will be generated by its modules.
	 */
	export const NONE: string = 'none'
}

/**
 * Namespace for dependency scope definitions
 */
export namespace DependencyScopes {
	/**
	 * The dependency will be used only at compiling time.
	 */
	export const COMPILE: string = 'compile';
	/**
	 * The dependency will be used only in tests.
	 */
	export const TEST: string = 'test';
	/**
	 * The dependency is required at runtime
	 */
	export const RUNTIME: string = 'runtime';
	/**
	 * The dependency is "shallow", in other words, the dependencies of the current dependency will not be loaded. It must be used with wisdom.
	 */
	export const SHALLOW: string = 'shallow'
}
