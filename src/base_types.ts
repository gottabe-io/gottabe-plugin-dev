/* Copyright (C) 2018 Alan N. Lohse

   This file is part of GottaBe.

	GottaBe is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation, either version 3 of the License, or
	(at your option) any later version.

	GottaBe is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with GottaBe.  If not, see <http://www.gnu.org/licenses/> */

/**
 * Define the possible phases of the build
 */
export enum Phase {
	/**
	 * The cleaning phase. This phase occours when the clean task is added to the command line
	 */
	CLEAN,
	/**
	 * It occours before the compile phase and it's when the dependencies are loaded
	 */
	RESOLVE_DEPENDENCIES,
	/**
	 * The compiling phase. It occours when the build task is added to the command line
	 */
	COMPILE,
	/**
	 * The linking phase. It occours after the compile phase in the build task
	 */
	LINK,
	/**
	 * The test phase can occour when the task test is added or after the build
	 */
	TEST,
	/**
	 * The packaging phase. It occours when the package task is added to the command line.
	 */
	PACKAGE,
	/**
	 * The installing phase.
	 */
	INSTALL,
	/**
	 * The publishing phase.
	 */
	PUBLISH
}

/**
 * This namespace has constants for all artifact types that can be generated by a build.
 */
export namespace ArtifactTypes {
	/**
	 * The constant for the artifact type executable. It means that the result of the build is going to be a executable file.
	 */
	export const EXECUTABLE: string = 'executable';
	/**
	 * The constant for the artifact type shared library. It means that the result of the build is going to be a shared library, a Dll in windows or a So file in linux.
	 */
	export const SHARED_LIBRARY: string = 'shared_library';
	/**
	 * The constant for the artifact type executable. It means that the result of the build is going to be a static library.
	 */
	export const STATIC_LIBRARY: string = 'static library';
	/**
	 * The constant for the artifact type driver.
	 */
	export const DRIVER: string = 'driver';
	/**
	 * This constant is used by parent build descritors. The artifacts will be generated by its modules.
	 */
	export const NONE: string = 'none'
}

/**
 * Namespace for dependency scope definitions
 */
export namespace DependencyScopes {
	/**
	 * The dependency will be used only at compiling time.
	 */
	export const COMPILE: string = 'compile';
	/**
	 * The dependency will be used only in tests.
	 */
	export const TEST: string = 'test';
	/**
	 * The dependency is required at runtime
	 */
	export const RUNTIME: string = 'runtime';
	/**
	 * The dependency is "shallow", in other words, the dependencies of the current dependency will not be loaded. It must be used with wisdom.
	 */
	export const SHALLOW: string = 'shallow'
}
